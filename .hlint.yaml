# Control which extensions/flags/modules/functions can be used
#
# - extensions:
#   - default: false # all extension are banned by default
#   - name: [PatternGuards, ViewPatterns] # only these listed extensions can be used
#   - {name: CPP, within: CrossPlatform} # CPP can only be used in a given module
#
# - flags:
#   - {name: -w, within: []} # -w is allowed nowhere
#
# - modules:
#   - {name: [Data.Set, Data.HashSet], as: Set} # if you import Data.Set qualified, it must be as 'Set'
#   - {name: Control.Arrow, within: []} # Certain modules are banned entirely
#
# - functions:
#   - {name: unsafePerformIO, within: []} # unsafePerformIO can only appear in no modules


# Add custom hints for this project
#
# Will suggest replacing "wibbleMany [myvar]" with "wibbleOne myvar"
# - error: {lhs: "wibbleMany [x]", rhs: wibbleOne x}


# Turn on hints that are off by default
#
# Ban "module X(module X) where", to require a real export list
# - warn: {name: Use explicit module export list}

- group: {name: generalise, enabled: true}
- group: {name: generalise-for-conciseness, enabled: true}

# Ignore some builtin hints
- ignore: {name: Use isJust}
- ignore: {name: Use head}
- ignore: {name: Eta reduce}
- ignore: {name: Redundant $}
- ignore: {name: Redundant do}
- ignore: {name: Redundant bracket}
- ignore: {name: Reduce duplication}
- ignore: {name: Move brackets to avoid $}
- ignore: {name: Use newtype instead of data}
- ignore: {name: Use notElem}
- ignore: {name: Use lambda-case}
- ignore: {name: Use list literal}


# Define some custom infix operators
# - fixity: infixr 3 ~^#^~


# To generate a suitable file for HLint do:
# $ hlint --default > .hlint.yaml
